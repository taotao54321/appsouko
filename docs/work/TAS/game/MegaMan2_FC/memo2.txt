バブルマンステージでのディレイ下について(更新版)

まず、スクロール判定は $82A1 で確定でいいと思います($828B は成功例のリプレイ
でブレークを仕掛けておいても反応しない)。ここが実行される際にYの値をいじって
やるとディレイ下の成否が変化するはずです。

成功/失敗時のトレースログを trace/ 以下に置いてます。
トレースログを見ると、
  成功例では $829E -> $C7A5 -> $C000 -> バンク切り替え中にNMI($CFED)
  失敗例では
    $829E -> $C7A5 -> $C000 -> 通常のバンク切り替え処理(NMI発生せず) -> $82A1(スクロール判定) ->
    後から $CC40 -> $C000 -> バンク切り替え中にNMI
となっているのがわかると思います。

つまり、失敗例の場合、NMI発生タイミングがそもそも不適切であり、スクロール判
定が既に行われた後に Y の値を書き換えている、ということになるようです。

$C000 は $C7A5 以外からも頻繁に呼び出されており、そのいずれのタイミングにお
いてもNMIが発生する可能性はあるので、$C022 が起こるかどうかだけを見てもディ
レイ下が成功する可能性を考えるのは難しそうです。

要するに $C7A5 -> $C000 -> バンク切り替え中にNMI, となるようにNMIの発生タイ
ミング(というか、NMI発生までに実行されるコード量)を調整しなければならない、
ということになりそうです。失敗時のトレースログを見ると、$C7A5 からNMIまでの
間に約1000命令あるので、$C7A5 の前に1000命令ほど余計に実行させてやらないとダ
メそうです(今のところ、可能なのかどうか全く見当がつかないですが)。

とりあえずできることとしては
  * NMIにブレークポイントを仕掛けておいて色々な入力を試し、処理量に影響する
    要素を洗い出す(NMI発生時点のスタックを見ればどこでNMIが発生したかわかるの
    で)
  * メタルブレード等の選択肢も検討してみる
くらいでしょうか?

(追記)
1号のみでは1000命令もずらすのはかなり厳しそうです(3発目の1号のタイミングをず
らすと50～100命令程度は変化しそうな感じですが…)。

なお、1号*2でもディレイが発生して $C022 が実行されることがありますが、この場
合、1号*3に比べて600命令ほど処理量が少なくなるようです。

負荷の測定方法としては、NMIルーチン内の $D08E にブレークポイントを仕掛け、
$D08E 実行時のスタックを見て呼び出し元を見るのが割と手軽かと思います(ただ、
呼び出し元のルーチンの詳細が不明な場合も多いので、なるべくトレースログをとる
方が確実だと思います。というかとった方がいいです)。

ディレイの定義について:
$C08E-$C090 はNMI待ち無限ループとなっており、通常のフレームではここでNMIが発
生します。この無限ループに到達するまでにNMIが発生してしまう、という状態を
「ディレイ」とか「ラグ」と呼ぶ、ということでおそらくいいと思います。

そもそもロックマンが落下したフレームに限ってディレイが発生する理由がよくわかっ
てませんが、多分落下した瞬間は処理が重いということなのかなと思います。

正直、今のところ1号のみでは狙い通りにNMIを発生させるのは無理じゃないかという
気がします。メタルブレードで落下の瞬間に敵死亡+アイテム出現、というような感
じじゃないと無理なのでは…。
→実際にやってみたリプレイとトレースログを metal-01/ 以下に置きました。
  1号を使う方法よりはマシですが、まだ650命令強のディレイが不足しています。メ
  タルブレードの発射タイミングなどをずらしたとしても、不足ディレイはせいぜい
  500～600命令くらいまでしか詰められないのではないかと推測されます。
